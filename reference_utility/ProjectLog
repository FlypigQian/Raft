这里记录了我在做 raft consensus algorithm 的时候的所思所想，作为工程进度保存着。

我一开始看着面包的代码，结构都能看得懂，不懂的地方在于gRPC的具体实现以及C++11的函数对象特性。但是最糊涂的地方在于我找不到他的程序入口，
找不到他的程序执行的逻辑。

在和面包聊天之后，他告诉我很多东西都是开了线程的，我这才反应过来。现在我开始做一个总结，里面必须掺杂着我的理解，然后和面包的代码进行对比，
最后批判性地分析我的思路是否可行。这个思考可以是high-level的，把时间限制的考虑延后吧。

周五的codereview上不需要考虑client，但是我还是在思考的时候小小地考虑一下。

server 的结构组织形式是怎么样的？当我们的 server 开起来的时候，到底发生了什么？？？

server 要执行的任务：满足外部 client 的需求，满足自己 consensus algorithm 的实现。

对用户来说，满足 client 需求的接口是隐藏、封装掉了 consensus algorithm 的实现的，它才不管你现在是 follower、candidate、还是
leader，也就是说我可以独立开一个线程给用户，那个线程就是在处理 rpc 问题。因为 server 不可能主动发消息给用户，只是用户发送请求，
而 server 进行半被动地回复，因此那个线程所需要的功能就是监听用户请求，一旦监听到了，那么就调用一些函数来进行这些请求的访问与查找，
那么这些函数要操作 server 当中的 map 内容，因此这些操作是下克上的函数调用，应该使用bind之类的骚操作。
对于不同的 identity，这些对于用户的借口应该是多态的封装掉的函数。

对于 consensus algorithm 的实现，server 当中需要一个独立的 raft 逻辑来实现，这个 raft 逻辑要做什么？？？
raft 要按照算法规则维护自己的 identity，并且更新自己的 log，以及根据自己的状态去领导别人更新别人的 log，以及
对用户的请求进行响应，对整个服务器集群的 log 写入一个 entry。
整个算法逻辑是一个状态机，这个状态机的触发有两个途径：1. RPC、2. timer。
raft 逻辑需要发送各种rpc，并且监听各种rpc，而这些rpc我都不会！！！需要去学习。
“RPC接收端也有自己的线程的，并且它会自动调用你的函数，你把 server 开起来应该就没什么事情要做了。”

这个时候我们来想一想会出现什么样的情况？

诶对了！既然我上文说到状态机的触发只有两个途径，那么我就开两个线程，去等待状态机的触发。然后因为有两个东西同时在等待状态机的触发，
如果有两个事件同时触发了状态机，并且它们要让状态机做出的动作有冲突的话，那么就会出现时序问题，因此我需要一个 eventQueue 来存放
我需要处理的任务，然后单独开一个线程监听 eventQueue，在有任务的时候执行任务，没有任务的时候等待执行。

并且状态机的触发主要在于RPC，因此 raft 的主要算法逻辑都实现在 rpc server 那里。它一旦接收到 rpc，就在它的线程当中作出相应的
反应。或者还是塞入eventQueue呢？（到时候再看看大包哥的代码吧，我感觉放到eventQueue里面去比较合适。但其实因为我还不知道gRPC
具体是如何作用的，因此我现在的想法也没什么说服力）。 
这样的话总体的架构就为：rpc、timer、eventQueue。

因为我现在还不会gRPC，但是我又想写一点代码，所以我还是先写timer和eventQueue。



现在是2018年7月25日上午。
raft工程已经有了长足的进展，我现在已经弄懂了这个工程的基本架构，我现在需要进行深入的思考，考虑到这个工程的细节问题，再继续做下去。
我接下来要深入思考各个模块究竟是怎么交互的。

raft当中有timer eventQueue 和 rpcServer。然后rpcServer和timer会根据它们收到的msg来作出相应的回应，并且将这个回应塞进eventQueue
里面。

这样的话我在 raft 当中，在初始化的时候就要给它们bind一个向eventQueue当中塞入function<void>的函数。（如果没有这个函数
那么，子模块各种具体作用的函数会频繁修改，但是往eventQueue当中塞入函数的这个method是不变的，如果我们的设计选择不bind塞入函数的函数，
就会做很多重复工作，这是不合时宜的）。
好，现在bind函数已经就绪。

那么raftRPC和timer都是根据什么作出具体的回应的呢？是根据它们的identity，因此每次identity转换的时候，我们都需要进行重新bind。
这就是identity transform所做的事情。其实我想写什么都可以，我只要写在那里，构造一个对象，写一点成员函数，然后bind给timer就行了。

timer需要什么，它会进行的动作仅仅是在timeout的时候在eventQueue里面绑定一个东西。
那么raftRPC server需要什么呢？它需要的仅仅是在收到requestVoteRPC和AppendEntryRPC的时候作出反应即可，因此所需要bind的动作还是
挺有限的。
诶，话说我为什么要考虑这个问题，大概是因为我怕在bind的过程当中bind太多的函数进到这些对象当中去，导致写得很丑陋，但是我稍微考虑一下感觉
并不会发生这种问题，but anyway，我接下来抄写一下论文当中的三个identity的具体动作，然后接下来的工作是写好框架，接下来学习gRPC。

gRPC的 hello world 已经实现完毕，但是我发现了一个问题，每个raft::rpcServer需要既开server端口，又开client端口。然后我继续思考，
其中server端口是等待的，是别人发过来的request我自己立即回应，其中grpc内部是多线程异步实现的，因此我在编写的时候需要让这个类多线程安全。
每个server又有一个client端口，这个端口是向外面的其他server发送请求的，并且从我的实现当中可以看出，它一发出请求，就是立刻得到了，相当于
join了。因此我每个server需要开一个server端口，若干个client端口，其中client端口的数量是根据自己的config文件中server的数量生成的。

我需要冷静思考。我觉得整个架构似乎需要更多的flexibility才让我安心。

经过我冷静思考之后，我准备列出整个raft需要做的事情。
1. transform identity (init & reinit)
2. do TimeOut action (Included in these, a clue that many functionality has to be executed within eventQueue)
3. respond to an outside client request (to be considered)
4. process RPC from outside (heartbeat, vote or not vote, appendEntry requests, record votes?), after which send out a respond.
5. send out requests (accompanied by a respond? )

How to organize these things once haunted me, but after some time of thinking, I sort out that may be response can be
sent out immediately, while actions are put into eventQueue to be executed.

Hence, the rpc interface function implementation send back request immediately based on current raft state, while it puts
a function into eventQueue to do the task asynchronously.
I have to ask big bread brother tomorrow.


2018. 7. 26 Evening.
Now, I have setup a program structure.
I want to know what the program has to execute, I also want to know how to do them.
How to do things concerns of how to assign tasks to multiple threads, which depends on the content of the tasks.
Therefore, I have to figure out what the executions are.

1. upon initialization:
    follower: nothing to do.
    candidate: start election, send RequestVote RPCs, and wait for other servers responses.
    leader: send heartbeat to other server.
2. do transformation when timeout:
    follower: transform to candidate.
    candidate: transform to candidate.
    leader: election timeout is prevented.
3...

List read-only actions:
    1. Whether-or-not vote for him? Follower.
List write-data actions:
    1. initialization -- change identity and states.
    2. appendEntries RPC -- change states.
List RPC concerning actions:
    1. request vote, wait and see the results.
    2. respond to successful or failed reply.

analysis:
    1.1 directly access state, use read_mutex.
    2.1 shutdown rpc and timer. use eventQueue.
    2.2 why not push it into eventQueue?
    3.1 send out request vote simultaneously, which means using multiple threads.
    3.2 change states.

The situation is clear I think.
For each server, it knows who its peers are. Assume it has 4 peers, then it launches
4 threads for client-ends to communicate with other servers.

Meanwhile, opens up its own server-end to reply peers' client-end request based on its current inner state configuration.
Note that "If command received from client: append entry to local log, respond after entry applied to state machine".
If respond only after entry applied to state machine??? Oh, I note that this is for command received from client, just leave
it alone up to now.

send out a timer to record time, and do timeout action when timeout.

When i'm implementing raft and three identities, I just kept wondering why not assign all tasks to each identities, and pass
all utility variable and information to them. Let raft itself be a puppet.
Instead, the proper way to do it is to pass limited variable (state and timer) to them, and bind a identity transform function
to them. Because without the class wrapper raft, it will be awkward for a single identity itself to transform identity, raft
behaves like a bridge linking three identities, meanwhile it lets three identities share one piece of memory of variables.

Big bread brother's design is nothing but necessary. I'm deeply appreciate that.

be very careful about multi-threaded programming.

Now, candidate can be transformed and request vote is starting. Candidate is trying to convert into leader.

// Then we may start to working on follower, which concerns with timer's timeout Action.
Why not keep working on candidate to implement its timeout action? OK let's do this.

Candidate's init (requestVote and Timer) is OK, the next thing needs to worry about is rpc server_end_.

Let's check the follower's rpc_server_end implementation.

Note that for gRPC server, server->Wait() function blocks this_thread until
"The server must be either shutting down or some other thread must call Shutdown for this function to ever return."

significant progress is made.
Then, what I'm going to do?
Then, I keep working on three identities' functionality irrelevant to log.
Reply in the server end is not worth doing. But active things like heartbeat is valuable to code.
Next I'm working on heartbeat.

Now heartbeat is working, and the reply from follower is working.
It's time to finish working on followers.

OK, the following work is to transform the previously trivial response into concrete and meaningful action, which firstly
replies on specifying Log data structure. Meanwhile, reading raft paper is indispensable.

The next thing to do is to implement algorithm based on this paper, but how can I implement it in a well-formed order in
order to do unit test in a manageable way?

The next thing to do is implementing default server response.

ApplyQueue is constructed, the next thing is to implement self_modification.

现在所有的term改变都会导致votedFor重制。

当follower收到term不小于它的人发的appendentry的话，它的timer会被重置。

我来思考一下怎么把东西往log里面插。

首先我要有一个接口。
这个接口是server开出来的客户端。
因此要在一个proto里面写两个函数。一个叫put一个叫get。
一个请求会被从client端发出，经过直接客户端的cache，转发到leader端口，在这个地方需要一个server之间的rpc。

我感觉我需要在每个server里面开一个queue来存放已经被接收的client请求，然后遇到appendEntries Request的时候对着leader猛发一下rpc，然后
leader会把接收到的所有queue当中的请求都增加到自己的log里作为当前term的新增entry。

